# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

.before_script: &global_before |-
  mkdir -p target/registry
  ln -s $PWD/target/registry $CARGO_HOME/registry

.cache: &global_cache
  unprotect: true
  key: cache-${CI_COMMIT_REF_SLUG}
  fallback_keys:
    - cache-$CI_DEFAULT_BRANCH
  paths: 
    - target

stages:
  - test
  - build
  - audit
  - deploy

# Use cargo to test the project
test:cargo:
  needs: []
  cache:
    <<: *global_cache
  before_script:
    - *global_before
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose

# Use a third party library to generate gitlab junit reports
test:junit-report:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs: []
  image: "rustlang/rust:nightly"
  cache:
    <<: *global_cache
    key: cache-${CI_COMMIT_REF_SLUG}-nightly
    fallback_keys:
      - cache-${CI_DEFAULT_BRANCH}-nightly
  before_script:
    - *global_before
  script:
    - rustc --version && cargo --version
    - cargo install junitify
    - cargo test --workspace -- --format=json -Z unstable-options --report-time | junitify --out $CI_PROJECT_DIR/tests/
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/tests/*.xml

# test:coverage:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   needs: []
#   image: "xd009642/tarpaulin"
#   cache:
#     <<: *global_cache
#     key: cache-${CI_COMMIT_REF_SLUG}-nightly
#     fallback_keys:
#       - cache-${CI_DEFAULT_BRANCH}-nightly
#   before_script:
#     - *global_before
#   script:
#     - rustc --version && cargo --version
#     - cargo tarpaulin
#   coverage: '/^\d+.\d+% coverage/'
#   artifacts:
#     paths:
#       - tarpaulin-report.html
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: cobertura.xml

audit:fmt:
  needs: []
  cache:
    <<: *global_cache
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - *global_before
    - rustup component add rustfmt
  script:
    - rustc --version && cargo --version
    - cargo fmt --check

audit:clippy:
  needs: []
  cache:
    <<: *global_cache
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - *global_before
    - rustup component add clippy
  script:
    - rustc --version && cargo --version
    - cargo clippy

# build:doc:
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#     - if: $CI_PIPELINE_SOURCE != "merge_request_event"
#       when: manual
#   stage: build
#   cache:
#     <<: *global_cache
#   before_script:
#     - *global_before
#   script:
#     - rustc --version && cargo --version
#     - cargo doc --workspace --no-deps
#   artifacts:
#     paths:
#       - target/doc

# pages:
#   needs:
#     - "build:doc"
#     - "test:coverage"
#   stage: deploy
#   dependencies:
#     - "build:doc"
#     - "test:coverage"
#   script:
#      - cp -r target/doc public
#     - cp tarpaulin-report.html public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   artifacts:
#     paths:
#       - public
